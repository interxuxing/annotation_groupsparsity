%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Description: test the annotation performance using JEC model: 
% classification, average precision and recall, number of keywords
% recalled.
%
% Usage: Run the script directly. To control which features to load,
% just comment out these "load" lines to skip corresponding features.
%
% Author: Xing Xu, xing.xu@ieee.org
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Test_JEC()
clc;

format long;

scope = 5;  % parameter "k" for kNN when searching nearest neighbors
lambda = 1; % weight to control the importance of priors

classify = 0;
TotalKWNum = 0;

TotalKW = [];

idFea = 1;
% load training data, comment out any line(s) to skip that feature(s)
load('sub_features\corel5k_DenseHue_train_w36');
load('sub_features\corel5k_DenseHue_test_w36');
Fea{idFea}=[corel5k_DenseHue_train_w36; corel5k_DenseHue_test_w36]; 
FeaName{idFea}='DenseHue';
idFea=idFea+1;

load('sub_features\corel5k_DenseSift_train_w36');
load('sub_features\corel5k_DenseSift_test_w36');
Fea{idFea}=[corel5k_DenseSift_train_w36; corel5k_DenseSift_test_w36];
FeaName{idFea}='DenseSift';
idFea=idFea+1;

load('sub_features\corel5k_Gist_train_w36');
load('sub_features\corel5k_Gist_test_w36');
Fea{idFea}=[corel5k_Gist_train_w36; corel5k_Gist_test_w36];
FeaName{idFea}='Gist';

[train_dim, d] = size(corel5k_Gist_train_w36);
[test_dim, d] = size(corel5k_Gist_test_w36);
trainidx = [1:train_dim];
testidx = [train_dim + 1 : (train_dim + test_dim)];

load('sub_features\word_matrix_train_w36');
load('sub_features\word_matrix_test_w36');
keywords = [word_matrix_train_w36; word_matrix_test_w36];

% Geting bounds to normalize distances generated by different features
for i=1:size(Fea,2)
    FeaMat = Fea{i};
    minFea = min(FeaMat);
    maxFea = max(FeaMat);
    maxDist = maxFea - minFea;
    alpha(i) = sum(maxDist(:,2:size(FeaMat,2)));
end


% Load test cases
for i=1:size(Fea, 2)
    FeaMat = Fea{i};
    test{i} = FeaMat(testidx,:);
%     testID = FeaMat(testidx,1);
    FeaMat(testidx,:) = [];
    Fea{i} = FeaMat;
end
testKW = keywords(testidx,:);
keywords(testidx,:) = [];

% Initialization (for evalRetrieval)
% test x word matrix (n x w) 
wPred = zeros(size(word_matrix_test_w36));
wTrue = zeros(size(wPred));
wKW = [];

% Go through each test case, find nearest neighbors (weighted distance),
% then transfer keywords to the test case according to local frequency
for i=1:test_dim
    [imageID] = JEC_no_class(FeaMat, Fea, test, FeaName, alpha, i, scope);
    
     % Classification, for Corel5K only since it has category information
%     if(mode(label) == testID(i,1))
%         classify = classify + 1;
%     end
    
    % Compute average precision and recall
    KW = keywords(imageID(1),:); % first transfer the nearest neighbor
    KW = find(KW~=0);
    KWTmp = [];
    for j=2:size(imageID,2)
        kwid = find(keywords(imageID(j),:)~=0);
        KWTmp = [KWTmp, kwid];
    end
    kwlocal = hist(KWTmp, 1:1:max(KWTmp));
    kwlocal = kwlocal / sum(kwlocal);
    kwave = kwlocal;
    [x,N] = sort(kwave, 'descend');
    N = N(x>0);
    N = setdiff(N, KW);
    KW = [KW, N]; % then transfer keywords according to local frequency
    if(size(KW,2)>5)
        KW = KW(1:5);
    end
    realKW = testKW(i,:);
    realKW = find(realKW~=0);
    correctKW = intersect(KW, realKW); 
    TotalKW = [TotalKW, correctKW];
    
    % for evaluation (evalRetrieval)
    for evalID = 1:numel(KW)
        wPred(i, KW(evalID)) = 1;
    end
    for evalID = 1:numel(realKW)
        wTrue(i, realKW(evalID)) = 1;
    end
    wKW = [wKW, realKW];
    
    if(mod(i, 20) == 0)
        fprintf('predict the %d-th sample finished! \n', i);
    end
end

TotalKWNum = TotalKWNum + size(unique(TotalKW),2);

classify = classify / 500
TotalKWNum % number of keywords recalled

wKW = unique(wKW);
[prec,rec] = evalRetrieval( wPred', wTrue' );
precision = mean(prec) * numel(prec) / numel(wKW) % average precision
recall = mean(rec) * numel(prec) / numel(wKW) % average recall