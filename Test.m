%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Description: test the annotation performance: classification,
% average precision and recall, number of keywords recalled.
%
% Usage: Run the script directly. To control which features to load,
% just comment out these "load" lines to skip corresponding features.
%
% Author: Shaoting Zhang, shaoting@cs.rutgers.edu
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Test()

format long;

scope = 5;  % parameter "k" for kNN when searching nearest neighbors
lambda = 1; % weight to control the importance of priors

classify = 0;
TotalKWNum = 0;

TotalKW = [];
% 0 -- JEC; 1 -- lasso; 2 -- group lasso; 5 -- Least Square; 
% 6 -- L2 regularization
regularizationType = 5; 

idFea = 1;
% load data, comment out any line(s) to skip that feature(s)
load('features\rgb16');Fea{idFea}=features;FeaName{idFea}='rgb';idFea=idFea+1;
load('features\rgb16saliency');Fea{idFea}=features;FeaName{idFea}='rgbsal';idFea=idFea+1;
load('features\hsv16');Fea{idFea}=features;FeaName{idFea}='hsv';idFea=idFea+1;
load('features\hsv16saliency');Fea{idFea}=features;FeaName{idFea}='hsvsal';idFea=idFea+1;
load('features\lab16');Fea{idFea}=features;FeaName{idFea}='lab';idFea=idFea+1;
load('features\lab16saliency');Fea{idFea}=features;FeaName{idFea}='labsal';idFea=idFea+1;
load('features\opp64');Fea{idFea}=features;FeaName{idFea}='opp';idFea=idFea+1;
load('features\opp64sal');Fea{idFea}=features;FeaName{idFea}='oppsal';idFea=idFea+1;
load('features\rg64');Fea{idFea}=features;FeaName{idFea}='rg';idFea=idFea+1;
load('features\rg64sal');Fea{idFea}=features;FeaName{idFea}='rgsal';idFea=idFea+1;

load('keywords');

% Geting bounds to normalize distances generated by different features
for i=1:size(Fea,2)
    FeaMat = Fea{i};
    minFea = min(FeaMat);
    maxFea = max(FeaMat);
    maxDist = maxFea - minFea;
    alpha(i) = sum(maxDist(:,2:size(FeaMat,2)));
end
    
% Compute weights
if regularizationType == 1
    weights = GetLassoWeights(Fea, alpha, lambda);
elseif regularizationType == 2
    weights = GetLassoGroupWeights(Fea, alpha, lambda);
elseif regularizationType == 5
    weights = GetLSWeights(Fea, alpha);
elseif regularizationType == 6
    weights = GetL2RegWeights(Fea, alpha, lambda);
end

% Load test cases
load('testidx','testidx');
for i=1:size(Fea, 2)
    FeaMat = Fea{i};
    test{i} = FeaMat(testidx,:);
    testID = FeaMat(testidx,1);
    FeaMat(testidx,:) = [];
    Fea{i} = FeaMat;
end
testKW = keywords(testidx,:);
keywords(testidx,:) = [];

% Using regularization methods, need some preprocess
if (regularizationType ~= 0)
    lassoTst = [];
    lassoFea = FeaMat(:,1);
    for j=1:size(Fea,2)
        FeaMat = Fea{j};
        tstMat = test{j};
        FeaMat = FeaMat(:,2:size(FeaMat,2));
        tstMat = tstMat(:,2:size(tstMat,2));
        lassoFea = [lassoFea, FeaMat/alpha(j)];
        lassoTst = [lassoTst, tstMat/alpha(j)];
    end
end

% Initialization (for evalRetrieval)
wPred = zeros(374, 499);
wTrue = zeros(374, 499);
wKW = [];

% Go through each test case, find nearest neighbors (weighted distance),
% then transfer keywords to the test case according to local frequency
for i=1:size(testID,1)
    if (regularizationType ~= 0) % lasso, group lasso, least square or L2
        [label, imageID] = ComputeSimilarity(lassoFea, lassoTst, i, weights, scope);
    else % JEC
        [label, imageID] = JEC(FeaMat, Fea, test, FeaName, alpha, i, scope);
    end
    % Classification, for Corel5K only since it has category information
    if(mode(label) == testID(i,1))
        classify = classify + 1;
    end
    % Compute average precision and recall
    KW = keywords(imageID(1),:); % first transfer the nearest neighbor
    KW = KW(KW~=0);
    KWTmp = [];
    for j=2:size(imageID,2)
        kwid = find(keywords(imageID(j),:)~=0);
        KWTmp = [KWTmp, keywords(imageID(j), kwid)];
    end
    kwlocal = hist(KWTmp, 1:1:max(KWTmp));
    kwlocal = kwlocal / sum(kwlocal);
    kwave = kwlocal;
    [x,N] = sort(kwave, 'descend');
    N = N(x>0);
    N = setdiff(N, KW);
    KW = [KW, N]; % then transfer keywords according to local frequency
    if(size(KW,2)>5)
        KW = KW(1:5);
    end
    realKW = testKW(i,:);
    realKW = realKW(realKW~=0);
    correctKW = intersect(KW, realKW); 
    TotalKW = [TotalKW, correctKW];
    
    % for evaluation (evalRetrieval)
    for evalID = 1:numel(KW)
        wPred(KW(evalID), i) = 1;
    end
    for evalID = 1:numel(realKW)
        wTrue(realKW(evalID), i) = 1;
    end
    wKW = [wKW, realKW];
end
TotalKWNum = TotalKWNum + size(unique(TotalKW),2);

classify = classify / 500
TotalKWNum % number of keywords recalled

wKW = unique(wKW);
[prec,rec] = evalRetrieval( wPred, wTrue );
precision = mean(prec) * numel(prec) / numel(wKW) % average precision
recall = mean(rec) * numel(prec) / numel(wKW) % average recall

